[{"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js":"1","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js":"2","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js":"3","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js":"4","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js":"5","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js":"6","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js":"7","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js":"8","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js":"9","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js":"10","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js":"11","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js":"12","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js":"13"},{"size":178,"mtime":1610721128291,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1609502983361,"results":"16","hashOfConfig":"15"},{"size":818,"mtime":1614435787495,"results":"17","hashOfConfig":"15"},{"size":813,"mtime":1610817332525,"results":"18","hashOfConfig":"15"},{"size":3919,"mtime":1614356989012,"results":"19","hashOfConfig":"15"},{"size":4707,"mtime":1614436820052,"results":"20","hashOfConfig":"15"},{"size":1899,"mtime":1612874136779,"results":"21","hashOfConfig":"15"},{"size":51,"mtime":1610720031868,"results":"22","hashOfConfig":"15"},{"size":551,"mtime":1612548687385,"results":"23","hashOfConfig":"15"},{"size":1287,"mtime":1614356885416,"results":"24","hashOfConfig":"15"},{"size":3624,"mtime":1613847897903,"results":"25","hashOfConfig":"15"},{"size":2101,"mtime":1614368264897,"results":"26","hashOfConfig":"15"},{"size":325,"mtime":1614357301479,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ypjp7o",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js",[],["59","60"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js",[],["61","62"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js",["63"],"import React,{useState} from 'react'\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { signin, authenticate} from '../auth/helper';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nfunction Signin() {\n\n    const history = useHistory();\n    const signupPush = () => history.push('/signup')\n    const dashboardPush = () => history.push('/dashboard')\n\n    const [values, setValues] = useState({\n        username:\"\",\n        password:\"\",\n        loading:false,\n        error:\"\",\n        sucess:false,\n        didRedirect:false,\n    })\n    // const {username, password, loading, error, sucess, didRedirect} = values;\n    const {username, password, didRedirect} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const errorMessage = () =>{\n        if (values.error === true){\n            return(\n                <Alert severity=\"error\" onClose={() => {}}>\n                    <AlertTitle>Error</AlertTitle>\n                    Something Went Wrong â€” <strong>Check your username and password</strong>\n                </Alert>\n            )\n        }\n    }\n\n\n    const successMessage = () =>{\n        if(values.sucess === true){\n            return (\n                <Alert severity=\"success\" onClose={() => {}}>\n                    <AlertTitle>Success</AlertTitle>\n                    <strong> <a >Login Successfull</a> </strong>\n                </Alert>\n            )\n        }\n    }\n\n    const onLoginSubmit = (event) => {\n        event.preventDefault();\n        setValues({...values, error:false, loading:true})\n        signin({username, password})\n        .then(\n            data => {\n                setValues({\n                    ...values,\n                    username:\"\",\n                    password:\"\"\n                })\n                console.log(\"Data\", data);\n                if(data.token){\n                    authenticate(data, ()=>{\n                        console.log(\"Token Added\");\n                        setValues({\n                            ...values,\n                            didRedirect:true\n                        })\n                    })\n                } else{\n                    setValues({\n                        ...values,\n                        username:\"\",\n                        password:\"\",\n                        error:true,\n                        loading:false\n                    })\n                }\n            }\n        )\n        .catch((e) => console.log(e))\n    }\n    const redirect = () =>{\n        if(didRedirect){\n            dashboardPush();\n        }\n    }\n\n    const signinForm = () =>{\n        return(\n            <div className=\"signinForm\">\n                <div className=\"signin\">\n                    <form action=\"\">\n                        <h2>Sign In</h2> \n                        <label htmlFor=\"\">Username</label>\n                        <input type=\"text\" placeholder=\"Enter User Name\" value={username} \n                        onChange={handleChange(\"username\")}\n                        />\n\n                        <label htmlFor=\"\">password</label>\n                        <input type=\"password\" placeholder=\"Enter Password\"\n                        value={password} onChange={handleChange(\"password\")}\n                        />\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={onLoginSubmit} >Login</Button>\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={signupPush} >Sign Up</Button>\n                        <Button color=\"primary\" >Forgot Password ?</Button>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            {successMessage()}            \n            {errorMessage()}\n            {signinForm()}\n            {redirect()}\n        </div>\n    )\n}\n\nexport default Signin\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js",["64","65"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js",["66"],"import React, {useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle} from '@material-ui/core'\n\nfunction ModalForm (){\n\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n    setOpen(true);\n    };\n\n    const handleClose = () => {\n    setOpen(false);\n    };\n\n    const [values, setValues] = useState({\n        companyName:\"\",\n        applyDate:\"\",\n        responseDate:\"\",\n        profile:\"\",\n        jobType:\"\",\n        status:\"\",\n        location:\"\"\n    })\n    const {companyName, applyDate, responseDate, profile, jobType, status, location} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const onSubmit = () =>{\n        return alert(\"hee\")\n    }\n\n    return (\n        <div className=\"myModal\">\n        <Button className=\"addButton\" variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\n            Add\n        </Button>\n        <Dialog open={open}   onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Add Application Data</DialogTitle>\n            <DialogContent>\n            <div className=\"applyForm\">\n                <div className=\"dataForm\">\n                <form action=\"\">\n                            <label htmlFor=\"\" className=\"text-light\">Company Name</label>\n                            <input required type=\"text\" placeholder=\"Company Name\" \n                            onChange={handleChange(\"companyName\")}\n                            value={companyName} required />\n    \n                            <label htmlFor=\"\">Apply Date</label>\n                            <input type=\"text\" placeholder=\"Date of Apply\"\n                            onChange={handleChange(\"applyDate\")} \n                            value={applyDate} />\n    \n                            <label htmlFor=\"\">Location</label>\n                            <input type=\"text\" placeholder=\"Where is Location\" \n                            onChange={handleChange(\"location\")} required\n                            value={location} />\n    \n                            <label htmlFor=\"\">Acknowledge</label>\n                            <input type=\"text\" placeholder=\"Expected date of response\" \n                            onChange={handleChange(\"responseDate\")} required\n                            value={responseDate} />\n\n                            <label htmlFor=\"\">Profile</label>\n                            <input type=\"text\" placeholder=\"Which profile you have applied\" \n                            onChange={handleChange(\"profile\")} required\n                            value={profile} />\n\n                            <label htmlFor=\"\">Job or Intern</label>\n                            <input type=\"text\" placeholder=\"J or I\" \n                            onChange={handleChange(\"jobType\")} required\n                            value={jobType} />\n\n                            <label htmlFor=\"\">Status</label>\n                            <input type=\"text\" placeholder=\"R S and P\" \n                            onChange={handleChange(\"status\")} required\n                            value={status} />\n                        </form>\n                </div>\n            </div>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>Done</Button>\n            </DialogActions>\n        </Dialog>\n        </div>\n    );\n}\n\nexport default ModalForm\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js",["67","68","69","70"],"import React,{useState, useEffect} from 'react'\nimport { fetchData } from './fetchData'\nimport { DataGrid } from '@material-ui/data-grid';\n\n\nexport default function ShowData() {\n    const [items, setItems] = useState([])\n    const [error, setError] = useState(false)\n\n    const loadAllData = () => {\n        fetchData()\n        .then((data) =>{\n            console.log(\"my data\", data);\n            if(data.error){\n                setError(data.error)\n                console.log(\"Errorrr\");\n                console.log(error);\n            }\n            else{\n                console.log(\"Inside else\");\n                setItems(data)\n            }\n        })\n        .catch(err => console.log(err))\n    }\n    useEffect(() => {\n        loadAllData()\n    }, []);\n\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 70 },\n        { field: 'cn', headerName: 'Company', width: 170 },\n        { field: 'ap', headerName: 'Apply Date', width: 150, type:'date' },\n        { field: 'rp', headerName: 'Response Date', width: 170, type:'date' },\n        {\n            field: 'loc',\n            headerName: 'Location',\n            width: 120,\n        },\n        {\n            field: 'type',\n            headerName: 'Job Type',\n            width: 120,\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 120,\n        }\n    ];\n\n    const rows = [\n        items.map(item => (\n            {id:item.id ,cn:item.companyName}\n        \n    ))\n    // { id: 1, cn: 'Snow', ap: 'Jon', status: 35 },\n    // { id: 2, cn: 'Lannister', ap: 'Cersei', status: 42 },\n\n    ];\n    return (\n        <div className=\"dataTable\">\n\n        {/* <div style={{ height: 600, width: '100%' }}>\n            <DataGrid rows={rows} columns={columns} pageSize={7} checkboxSelection />\n        </div> */}\n                <ul>\n            <h1>My data</h1>\n        {items.map(item => (\n            <li key={item.id}>\n                {item.companyName}\n                {item.applyDate}\n            </li>\n        ))}\n        </ul>\n        </div>\n    );\n}\n\n\n// export default ShowData","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":46,"column":30,"nodeType":"79","endLine":46,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":79,"column":55,"nodeType":"79","endLine":79,"endColumn":79},{"ruleId":"80","severity":1,"message":"81","line":95,"column":47,"nodeType":"82","endLine":95,"endColumn":55},{"ruleId":"80","severity":1,"message":"81","line":49,"column":49,"nodeType":"82","endLine":49,"endColumn":57},{"ruleId":"83","severity":1,"message":"84","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":18},{"ruleId":"87","severity":1,"message":"88","line":28,"column":8,"nodeType":"89","endLine":28,"endColumn":10,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"91","line":30,"column":11,"nodeType":"85","messageId":"86","endLine":30,"endColumn":18},{"ruleId":"83","severity":1,"message":"92","line":52,"column":11,"nodeType":"85","messageId":"86","endLine":52,"endColumn":15},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'DataGrid' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAllData'. Either include it or remove the dependency array.","ArrayExpression",["95"],"'columns' is assigned a value but never used.","'rows' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [loadAllData]",{"range":"98","text":"99"},[757,759],"[loadAllData]"]