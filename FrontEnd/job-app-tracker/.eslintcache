[{"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js":"1","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js":"2","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js":"3","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js":"4","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js":"5","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js":"6","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js":"7","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js":"8","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js":"9","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js":"10","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js":"11","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js":"12","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js":"13"},{"size":178,"mtime":1610721128291,"results":"14","hashOfConfig":"15"},{"size":528,"mtime":1609502983361,"results":"16","hashOfConfig":"15"},{"size":818,"mtime":1614435787495,"results":"17","hashOfConfig":"15"},{"size":813,"mtime":1610817332525,"results":"18","hashOfConfig":"15"},{"size":3919,"mtime":1614356989012,"results":"19","hashOfConfig":"15"},{"size":4707,"mtime":1614436820052,"results":"20","hashOfConfig":"15"},{"size":1912,"mtime":1614439602578,"results":"21","hashOfConfig":"15"},{"size":51,"mtime":1610720031868,"results":"22","hashOfConfig":"15"},{"size":551,"mtime":1612548687385,"results":"23","hashOfConfig":"15"},{"size":1326,"mtime":1614450562611,"results":"24","hashOfConfig":"15"},{"size":3692,"mtime":1614451545855,"results":"25","hashOfConfig":"15"},{"size":3227,"mtime":1614527463241,"results":"26","hashOfConfig":"15"},{"size":325,"mtime":1614357301479,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1ypjp7o",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js",[],["59","60"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js",[],["61","62"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js",["63"],"import React,{useState} from 'react'\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { signin, authenticate} from '../auth/helper';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nfunction Signin() {\n\n    const history = useHistory();\n    const signupPush = () => history.push('/signup')\n    const dashboardPush = () => history.push('/dashboard')\n\n    const [values, setValues] = useState({\n        username:\"\",\n        password:\"\",\n        loading:false,\n        error:\"\",\n        sucess:false,\n        didRedirect:false,\n    })\n    // const {username, password, loading, error, sucess, didRedirect} = values;\n    const {username, password, didRedirect} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const errorMessage = () =>{\n        if (values.error === true){\n            return(\n                <Alert severity=\"error\" onClose={() => {}}>\n                    <AlertTitle>Error</AlertTitle>\n                    Something Went Wrong â€” <strong>Check your username and password</strong>\n                </Alert>\n            )\n        }\n    }\n\n\n    const successMessage = () =>{\n        if(values.sucess === true){\n            return (\n                <Alert severity=\"success\" onClose={() => {}}>\n                    <AlertTitle>Success</AlertTitle>\n                    <strong> <a >Login Successfull</a> </strong>\n                </Alert>\n            )\n        }\n    }\n\n    const onLoginSubmit = (event) => {\n        event.preventDefault();\n        setValues({...values, error:false, loading:true})\n        signin({username, password})\n        .then(\n            data => {\n                setValues({\n                    ...values,\n                    username:\"\",\n                    password:\"\"\n                })\n                console.log(\"Data\", data);\n                if(data.token){\n                    authenticate(data, ()=>{\n                        console.log(\"Token Added\");\n                        setValues({\n                            ...values,\n                            didRedirect:true\n                        })\n                    })\n                } else{\n                    setValues({\n                        ...values,\n                        username:\"\",\n                        password:\"\",\n                        error:true,\n                        loading:false\n                    })\n                }\n            }\n        )\n        .catch((e) => console.log(e))\n    }\n    const redirect = () =>{\n        if(didRedirect){\n            dashboardPush();\n        }\n    }\n\n    const signinForm = () =>{\n        return(\n            <div className=\"signinForm\">\n                <div className=\"signin\">\n                    <form action=\"\">\n                        <h2>Sign In</h2> \n                        <label htmlFor=\"\">Username</label>\n                        <input type=\"text\" placeholder=\"Enter User Name\" value={username} \n                        onChange={handleChange(\"username\")}\n                        />\n\n                        <label htmlFor=\"\">password</label>\n                        <input type=\"password\" placeholder=\"Enter Password\"\n                        value={password} onChange={handleChange(\"password\")}\n                        />\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={onLoginSubmit} >Login</Button>\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={signupPush} >Sign Up</Button>\n                        <Button color=\"primary\" >Forgot Password ?</Button>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            {successMessage()}            \n            {errorMessage()}\n            {signinForm()}\n            {redirect()}\n        </div>\n    )\n}\n\nexport default Signin\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js",["64","65"],"import React, {useState} from 'react'\nimport {Button} from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport {signup} from '../auth/helper'\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nfunction Signup() {\n\n    const history = useHistory();\n    const loginPush = () => history.push('/signin')\n    \n    const [values, setValues] = useState({\n        firstName:\"\",\n        lastName:\"\",\n        email:\"\",\n        username:\"\",\n        password:\"\",\n        error:\"\",\n        sucess:false,\n    })\n\n    // const {firstName, lastName, email, username, password, error, sucess} = values;\n    const {firstName, lastName, email, username, password, error} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const onSubmit = (event) => {\n\n        event.preventDefault();\n            setValues({...values, error:false})\n            signup({firstName, lastName, email, username, password})\n            .then((data) =>{\n                console.log(\"Data\", data);\n                console.log(\"Error is : \", data['email'])\n                if(data.email === email){\n                    setValues({\n                        ...values,\n                        firstName:\"\",\n                        lastName:\"\",\n                        email:\"\",\n                        username:\"\",\n                        password:\"\",\n                        error:\"\",\n                        sucess:true\n                    })\n                }\n                else{\n                    setValues({\n                        ...values,\n                        error:true,\n                        success:false\n                    })\n                    console.log(\"In the else part and error is : \", error)\n                }\n            })\n            .catch((e) => console.log(e))\n    }\n\n    const errorMessage = () =>{\n        if (values.error === true){\n            return(\n                <Alert severity=\"error\" onClose={() => {}}>\n                    <AlertTitle>Error</AlertTitle>\n                    Something Went Wrong please try again with different â€” <strong>Email and Username!</strong>\n                </Alert>\n            )\n        }\n    }\n\n\n    const successMessage = () =>{\n        if(values.sucess === true){\n            return (\n                <Alert severity=\"success\" onClose={() => {}}>\n                    <AlertTitle>Success</AlertTitle>\n                    Signup completed. Please <strong> <a onClick={loginPush} >Login Here.</a> </strong>\n                </Alert>\n            )\n        }\n    }\n\n    const signupForm = () => {\n        return (\n            <div>\n                <div className=\"signup\">\n                    <div className=\"signupForm\">\n                        <h2>Sign Up</h2>\n                        <form action=\"\">\n                            <label htmlFor=\"\" className=\"text-light\">First Name</label>\n                            <input required type=\"text\" placeholder=\"Enter First Name\" \n                            onChange={handleChange(\"firstName\")}\n                            value={firstName} required />\n    \n                            <label htmlFor=\"\">Last Name</label>\n                            <input type=\"text\" placeholder=\"Enter Last Name\"\n                            onChange={handleChange(\"lastName\")} \n                            value={lastName} />\n    \n                            <label htmlFor=\"\">Email</label>\n                            <input type=\"text\" placeholder=\"Enter your email\" \n                            onChange={handleChange(\"email\")} required\n                            value={email} />\n    \n                            <label htmlFor=\"\">Username</label>\n                            <input type=\"text\" placeholder=\"username\" \n                            onChange={handleChange(\"username\")} required\n                            value={username} />\n    \n                            <label htmlFor=\"\">Password</label>\n                            <input type=\"password\" placeholder=\"Enter Password\" \n                            onChange={handleChange(\"password\")} required\n                            value={password} />\n    \n                            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>Sign up</Button>\n                            <Button color=\"primary\" onClick={loginPush} >Login now ?</Button>\n    \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"\">\n            {successMessage()}\n            {errorMessage()}\n            {signupForm()}\n        </div>\n            \n    )\n}\n\nexport default Signup\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js",["66"],"import React, {useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle} from '@material-ui/core'\n\nfunction ModalForm (){\n\n    const [open, setOpen] = useState(false);\n\n    const handleClickOpen = () => {\n    setOpen(true);\n    };\n\n    const handleClose = () => {\n    setOpen(false);\n    };\n\n    const [values, setValues] = useState({\n        companyName:\"\",\n        applyDate:\"\",\n        responseDate:\"\",\n        profile:\"\",\n        jobType:\"\",\n        status:\"\",\n        location:\"\"\n    })\n    const {companyName, applyDate, responseDate, profile, jobType, status, location} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const onSubmit = () =>{\n        return alert(\"hee\")\n    }\n\n    return (\n        <div className=\"myModal\">\n        <div className=\"buttonAdd\">\n            <Button className=\"addButton\" variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\n                Add Data\n            </Button>\n        </div>\n        <Dialog open={open}   onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Add Application Data</DialogTitle>\n            <DialogContent>\n            <div className=\"applyForm\">\n                <div className=\"dataForm\">\n                <form action=\"\">\n                            <label htmlFor=\"\" className=\"text-light\">Company Name</label>\n                            <input required type=\"text\" placeholder=\"Company Name\" \n                            onChange={handleChange(\"companyName\")}\n                            value={companyName} required />\n    \n                            <label htmlFor=\"\">Apply Date</label>\n                            <input type=\"text\" placeholder=\"Date of Apply\"\n                            onChange={handleChange(\"applyDate\")} \n                            value={applyDate} />\n    \n                            <label htmlFor=\"\">Location</label>\n                            <input type=\"text\" placeholder=\"Where is Location\" \n                            onChange={handleChange(\"location\")} required\n                            value={location} />\n    \n                            <label htmlFor=\"\">Acknowledge</label>\n                            <input type=\"text\" placeholder=\"Expected date of response\" \n                            onChange={handleChange(\"responseDate\")} required\n                            value={responseDate} />\n\n                            <label htmlFor=\"\">Profile</label>\n                            <input type=\"text\" placeholder=\"Which profile you have applied\" \n                            onChange={handleChange(\"profile\")} required\n                            value={profile} />\n\n                            <label htmlFor=\"\">Job or Intern</label>\n                            <input type=\"text\" placeholder=\"J or I\" \n                            onChange={handleChange(\"jobType\")} required\n                            value={jobType} />\n\n                            <label htmlFor=\"\">Status</label>\n                            <input type=\"text\" placeholder=\"R S and P\" \n                            onChange={handleChange(\"status\")} required\n                            value={status} />\n                        </form>\n                </div>\n            </div>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>Done</Button>\n            </DialogActions>\n        </Dialog>\n        </div>\n    );\n}\n\nexport default ModalForm\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js",["67","68","69","70","71"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"72","replacedBy":"76"},{"ruleId":"74","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":46,"column":30,"nodeType":"80","endLine":46,"endColumn":34},{"ruleId":"78","severity":1,"message":"79","line":79,"column":55,"nodeType":"80","endLine":79,"endColumn":79},{"ruleId":"81","severity":1,"message":"82","line":95,"column":47,"nodeType":"83","endLine":95,"endColumn":55},{"ruleId":"81","severity":1,"message":"82","line":51,"column":49,"nodeType":"83","endLine":51,"endColumn":57},{"ruleId":"84","severity":1,"message":"85","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":30,"column":8,"nodeType":"90","endLine":30,"endColumn":10,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":56,"column":16,"nodeType":"94","messageId":"95","endLine":56,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":67,"column":23,"nodeType":"94","messageId":"95","endLine":67,"endColumn":25},{"ruleId":"96","severity":1,"message":"97","line":85,"column":20,"nodeType":"98","messageId":"99","endLine":85,"endColumn":22},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAllData'. Either include it or remove the dependency array.","ArrayExpression",["102"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [loadAllData]",{"range":"105","text":"106"},[805,807],"[loadAllData]"]