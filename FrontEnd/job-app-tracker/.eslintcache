[{"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js":"1","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js":"2","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js":"3","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js":"4","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js":"5","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js":"6","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js":"7","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js":"8","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js":"9","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js":"10","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js":"11","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js":"12","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js":"13","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/dataHelper.js":"14"},{"size":178,"mtime":1614711365766,"results":"15","hashOfConfig":"16"},{"size":528,"mtime":1609502983361,"results":"17","hashOfConfig":"16"},{"size":818,"mtime":1614711365762,"results":"18","hashOfConfig":"16"},{"size":1314,"mtime":1615365831660,"results":"19","hashOfConfig":"16"},{"size":3919,"mtime":1614711365766,"results":"20","hashOfConfig":"16"},{"size":4707,"mtime":1614711365766,"results":"21","hashOfConfig":"16"},{"size":1912,"mtime":1614711365766,"results":"22","hashOfConfig":"16"},{"size":51,"mtime":1614711365762,"results":"23","hashOfConfig":"16"},{"size":551,"mtime":1614711365766,"results":"24","hashOfConfig":"16"},{"size":1326,"mtime":1614711365766,"results":"25","hashOfConfig":"16"},{"size":5678,"mtime":1614796667820,"results":"26","hashOfConfig":"16"},{"size":3380,"mtime":1614774837398,"results":"27","hashOfConfig":"16"},{"size":333,"mtime":1614774786101,"results":"28","hashOfConfig":"16"},{"size":603,"mtime":1614772763909,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ypjp7o",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/index.js",[],["66","67"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/App.js",[],["68","69"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Routes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/core/home.js",["70"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signin.js",["71"],"import React,{useState} from 'react'\nimport { Button } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { signin, authenticate} from '../auth/helper';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nfunction Signin() {\n\n    const history = useHistory();\n    const signupPush = () => history.push('/signup')\n    const dashboardPush = () => history.push('/dashboard')\n\n    const [values, setValues] = useState({\n        username:\"\",\n        password:\"\",\n        loading:false,\n        error:\"\",\n        sucess:false,\n        didRedirect:false,\n    })\n    // const {username, password, loading, error, sucess, didRedirect} = values;\n    const {username, password, didRedirect} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const errorMessage = () =>{\n        if (values.error === true){\n            return(\n                <Alert severity=\"error\" onClose={() => {}}>\n                    <AlertTitle>Error</AlertTitle>\n                    Something Went Wrong â€” <strong>Check your username and password</strong>\n                </Alert>\n            )\n        }\n    }\n\n\n    const successMessage = () =>{\n        if(values.sucess === true){\n            return (\n                <Alert severity=\"success\" onClose={() => {}}>\n                    <AlertTitle>Success</AlertTitle>\n                    <strong> <a >Login Successfull</a> </strong>\n                </Alert>\n            )\n        }\n    }\n\n    const onLoginSubmit = (event) => {\n        event.preventDefault();\n        setValues({...values, error:false, loading:true})\n        signin({username, password})\n        .then(\n            data => {\n                setValues({\n                    ...values,\n                    username:\"\",\n                    password:\"\"\n                })\n                console.log(\"Data\", data);\n                if(data.token){\n                    authenticate(data, ()=>{\n                        console.log(\"Token Added\");\n                        setValues({\n                            ...values,\n                            didRedirect:true\n                        })\n                    })\n                } else{\n                    setValues({\n                        ...values,\n                        username:\"\",\n                        password:\"\",\n                        error:true,\n                        loading:false\n                    })\n                }\n            }\n        )\n        .catch((e) => console.log(e))\n    }\n    const redirect = () =>{\n        if(didRedirect){\n            dashboardPush();\n        }\n    }\n\n    const signinForm = () =>{\n        return(\n            <div className=\"signinForm\">\n                <div className=\"signin\">\n                    <form action=\"\">\n                        <h2>Sign In</h2> \n                        <label htmlFor=\"\">Username</label>\n                        <input type=\"text\" placeholder=\"Enter User Name\" value={username} \n                        onChange={handleChange(\"username\")}\n                        />\n\n                        <label htmlFor=\"\">password</label>\n                        <input type=\"password\" placeholder=\"Enter Password\"\n                        value={password} onChange={handleChange(\"password\")}\n                        />\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={onLoginSubmit} >Login</Button>\n\n                        <Button variant=\"contained\" color=\"primary\" onClick={signupPush} >Sign Up</Button>\n                        <Button color=\"primary\" >Forgot Password ?</Button>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            {successMessage()}            \n            {errorMessage()}\n            {signinForm()}\n            {redirect()}\n        </div>\n    )\n}\n\nexport default Signin\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/user/Signup.js",["72","73"],"import React, {useState} from 'react'\nimport {Button} from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport {signup} from '../auth/helper'\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nfunction Signup() {\n\n    const history = useHistory();\n    const loginPush = () => history.push('/signin')\n    \n    const [values, setValues] = useState({\n        firstName:\"\",\n        lastName:\"\",\n        email:\"\",\n        username:\"\",\n        password:\"\",\n        error:\"\",\n        sucess:false,\n    })\n\n    // const {firstName, lastName, email, username, password, error, sucess} = values;\n    const {firstName, lastName, email, username, password, error} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const onSubmit = (event) => {\n\n        event.preventDefault();\n            setValues({...values, error:false})\n            signup({firstName, lastName, email, username, password})\n            .then((data) =>{\n                console.log(\"Data\", data);\n                console.log(\"Error is : \", data['email'])\n                if(data.email === email){\n                    setValues({\n                        ...values,\n                        firstName:\"\",\n                        lastName:\"\",\n                        email:\"\",\n                        username:\"\",\n                        password:\"\",\n                        error:\"\",\n                        sucess:true\n                    })\n                }\n                else{\n                    setValues({\n                        ...values,\n                        error:true,\n                        success:false\n                    })\n                    console.log(\"In the else part and error is : \", error)\n                }\n            })\n            .catch((e) => console.log(e))\n    }\n\n    const errorMessage = () =>{\n        if (values.error === true){\n            return(\n                <Alert severity=\"error\" onClose={() => {}}>\n                    <AlertTitle>Error</AlertTitle>\n                    Something Went Wrong please try again with different â€” <strong>Email and Username!</strong>\n                </Alert>\n            )\n        }\n    }\n\n\n    const successMessage = () =>{\n        if(values.sucess === true){\n            return (\n                <Alert severity=\"success\" onClose={() => {}}>\n                    <AlertTitle>Success</AlertTitle>\n                    Signup completed. Please <strong> <a onClick={loginPush} >Login Here.</a> </strong>\n                </Alert>\n            )\n        }\n    }\n\n    const signupForm = () => {\n        return (\n            <div>\n                <div className=\"signup\">\n                    <div className=\"signupForm\">\n                        <h2>Sign Up</h2>\n                        <form action=\"\">\n                            <label htmlFor=\"\" className=\"text-light\">First Name</label>\n                            <input required type=\"text\" placeholder=\"Enter First Name\" \n                            onChange={handleChange(\"firstName\")}\n                            value={firstName} required />\n    \n                            <label htmlFor=\"\">Last Name</label>\n                            <input type=\"text\" placeholder=\"Enter Last Name\"\n                            onChange={handleChange(\"lastName\")} \n                            value={lastName} />\n    \n                            <label htmlFor=\"\">Email</label>\n                            <input type=\"text\" placeholder=\"Enter your email\" \n                            onChange={handleChange(\"email\")} required\n                            value={email} />\n    \n                            <label htmlFor=\"\">Username</label>\n                            <input type=\"text\" placeholder=\"username\" \n                            onChange={handleChange(\"username\")} required\n                            value={username} />\n    \n                            <label htmlFor=\"\">Password</label>\n                            <input type=\"password\" placeholder=\"Enter Password\" \n                            onChange={handleChange(\"password\")} required\n                            value={password} />\n    \n                            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>Sign up</Button>\n                            <Button color=\"primary\" onClick={loginPush} >Login now ?</Button>\n    \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"\">\n            {successMessage()}\n            {errorMessage()}\n            {signupForm()}\n        </div>\n            \n    )\n}\n\nexport default Signup\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/index.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/Backend.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/auth/helper/PrivateRoutes.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/Dashboard.js",[],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/modalForm.js",["74","75","76","77"],"import React, {useState} from 'react'\nimport {Button, Dialog, DialogActions, DialogContent, DialogTitle} from '@material-ui/core'\nimport {dataHelper} from './dataHelper'\n\nfunction ModalForm (){\n\n    const [open, setOpen] = useState(false);\n\n    const myDataFromLS = JSON.parse(localStorage.getItem(\"jwt\"))\n\n    const token = myDataFromLS.token;\n    const id = myDataFromLS.user.id;\n    const myUsername = myDataFromLS.user.username\n\n    const handleClickOpen = () => {\n    setOpen(true);\n    };\n\n    const handleClose = () => {\n    setOpen(false);\n    };\n\n    const [values, setValues] = useState({\n        username:myUsername,\n        companyName:\"\",\n        applyDate:\"\",\n        responseDate:\"\",\n        profile:\"\",\n        jobType:\"\",\n        status:\"\",\n        jobProfile:\"\",\n        jobLocation:\"\",\n        sucess:false,\n        loading:false\n    })\n    const {username, companyName, applyDate, responseDate, profile, jobType, status, jobLocation, jobProfile, sucess, loading} = values;\n\n    const handleChange = name => event =>{\n        setValues({...values, error:false, [name]:event.target.value})\n    }\n\n    const onSubmit = (event) =>{\n        event.preventDefault();\n        // setValues({...values, sucess:false, loading:false});\n        dataHelper(id, token, values)\n        .then(\n            response => { \n                console.log(response)\n            }\n        )\n    }\n\n    // const successMessage = () =>{\n    //     if(sucess === true){\n    //         console.log(\"sucess\");\n    //         handleClose()\n    //     }\n    // }\n\n    return (\n        <div>\n        {/* {successMessage()} */}\n\n        <div className=\"myModal\">\n        <div className=\"buttonAdd\">\n            <Button className=\"addButton\" variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\n                Add Data\n            </Button>\n        </div>\n        <Dialog open={open}   onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Add Application Data</DialogTitle>\n            <DialogContent>\n            <div className=\"applyForm\">\n                <div className=\"dataForm\">\n                <form action=\"\">\n                            <label htmlFor=\"\" className=\"text-light\">Company Name</label>\n                            <input required type=\"text\" placeholder=\"Company Name\" \n                            onChange={handleChange(\"companyName\")}\n                            value={companyName} required />\n    \n                            <label htmlFor=\"\">Apply Date</label>\n                            <input type=\"text\" placeholder=\"Date of Apply (yyyy-mm-dd)\"\n                            onChange={handleChange(\"applyDate\")} \n                            value={applyDate} />\n    \n                            <label htmlFor=\"\">Location</label>\n                            <input type=\"text\" placeholder=\"Where is Location\" \n                            onChange={handleChange(\"jobLocation\")} required\n                            value={jobLocation} />\n                            \n                            <label htmlFor=\"\">Job Position</label>\n                            <input type=\"text\" placeholder=\"Enter Domain\" \n                            onChange={handleChange(\"jobProfile\")} required\n                            value={jobProfile} />\n    \n                            <label htmlFor=\"\">Acknowledge</label>\n                            <input type=\"text\" placeholder=\"Expected date of response (yyyy-mm-dd)\" \n                            onChange={handleChange(\"responseDate\")} required\n                            value={responseDate} />\n\n                            <label htmlFor=\"\">Profile</label>\n                            <input type=\"text\" placeholder=\"Which profile you have applied\" \n                            onChange={handleChange(\"profile\")} required\n                            value={profile} />\n\n                            <label htmlFor=\"\">Job Type</label>\n                            {/* <input type=\"text\" placeholder=\"\" \n                            onChange={handleChange(\"jobType\")} required\n                            value={jobType} \n                            /> */}\n                            <select className=\"select\" onChange={handleChange(\"jobType\")} value={jobType}>\n                                <option name=\"none\"></option>\n                                <option name=\"fullTime\">Full Time</option>\n                                <option name=\"internship\">Internship</option>\n                            </select>\n                            \n\n                            <label htmlFor=\"\">Status</label>\n                            {/* <input type=\"text\" placeholder=\"R S and P\" \n                            onChange={handleChange(\"status\")} required\n                            value={status} /> */}\n                            <select className=\"select\" onChange={handleChange(\"status\")} value={status}>\n                                <option name=\"none1\"></option>\n                                <option name=\"selected\">Selected</option>\n                                <option name=\"pending\">Pending</option>\n                                <option name=\"rejected\">Rejected</option>\n                            </select>\n                        </form>\n                </div>\n            </div>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>Done</Button>\n            </DialogActions>\n        </Dialog>\n        </div>\n    </div>\n    );\n}\n\nexport default ModalForm\n","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/showData.js",["78","79","80","81","82","83"],"import React,{useState, useEffect} from 'react'\nimport { fetchData } from './fetchData'\nimport { DataGrid } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\n\n\n\nexport default function ShowData() {\n\n    const myDataFromLS = JSON.parse(localStorage.getItem(\"jwt\"))\n    const myUsername = myDataFromLS.user.username\n\n\n    const [items, setItems] = useState([])\n    const [error, setError] = useState(false)\n\n    const loadAllData = () => {\n        fetchData(myUsername)\n        .then((data) =>{\n            console.log(\"my data\", data);\n            if(data.error){\n                setError(data.error)\n                console.log(\"Errorrr\");\n                console.log(error);\n            }\n            else{\n                console.log(\"Inside else\");\n                setItems(data)\n            }\n        })\n        .catch(err => console.log(err))\n    }\n    useEffect(() => {\n        loadAllData()\n    }, []);\n\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 70 },\n        { field: 'cn', headerName: 'Company', width: 120 },\n        { field: 'jp', headerName: 'Profile', width: 180 },\n        { field: 'ap', headerName: 'Apply Date', width: 150, type:'date' },\n        { field: 'rp', headerName: 'Response Date', width: 170, type:'date' },\n        {\n            field: 'loc',\n            headerName: 'Location',\n            width: 120,\n        },\n        {\n            field: 'type',\n            headerName: 'Job Type',\n            width: 120,\n        },\n        {\n            field: 'status',\n            headerName: 'Status',\n            width: 120,\n            className:\"status\"\n        }\n    ];\n    const statusFunction = (clr) =>{\n        if(clr == \"Selected\"){\n            const mlr = <div className=\"status\">\n                {/* <Button variant=\"contained\" color=\"secondary\">\n                    Selected\n                </Button> */}\n                Selected\n            </div>\n            // console.log('meee',mlr.props.children);\n            return (\n                mlr.props.children\n            )\n        } else if(clr == \"Pending\"){\n            const mlr = <div className=\"status\">\n                Pending\n            </div>\n            return (\n                mlr.props.children\n            )\n        } else{\n            const mlr = <div className=\"status\">\n                Rejected\n            </div>\n            return (\n                mlr.props.children\n            )\n        }\n    }\n    const myCount = 1;\n    const rows = []\n    items.map(item =>{\n        rows.push({id:item.id, cn:item.companyName, ap:item.applyDate, \n                    rp:item.responseDate, loc:item.jobLocation, type:item.jobType, \n                    jp:item.jobProfile,\n                    status:statusFunction(item.status)})\n    })\n    // console.log(\"My array chek\", rows);\n\n    // const rows = [\n    // //     items.map(item => (\n    // //         {id:item.id ,cn:item.companyName}\n        \n    // // )),\n    // { id: 1, cn: 'Snow', ap: 'Jon', status: 35 },\n    // { id: 2, cn: 'Lannister', ap: 'Cersei', status: 42 },\n\n    // ];\n    return (\n        <div className=\"dataTable\">\n\n            <div style={{ height: 600, width:'auto' }} className=\"mainTable\">\n                <DataGrid rows={rows} columns={columns} pageSize={7} checkboxSelection />\n            </div>\n        \n        </div>\n    );\n}\n\n\n// export default ShowData","/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/fetchData.js",[],["84","85"],"/home/pradhyum/Documents/JobApplicationTracker/FrontEnd/job-app-tracker/src/mainData/helper/dataHelper.js",["86"],"import React from 'react'\nimport { API } from '../../Backend'\n\nexport const dataHelper = (id, token, userData) => {\n    console.log(\"Innnnnnnnn this fun\", userData);\n\n    const formData = new FormData();\n    for (const name in userData){\n        formData.append(name, userData[name])\n    }\n\n    // const formData = new FormData();\n\n    return fetch(`${API}ApplicationData/add/${id}/${token}/`,{\n        method:\"POST\",\n        body:formData  \n    })\n    .then((response) =>{\n        console.log(\"Innnnnnnnn this\", response);\n        return response.json();\n    })\n    .catch(err => console.log(err))\n}\n\n\n",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"87","replacedBy":"91"},{"ruleId":"89","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":37,"column":17,"nodeType":"95","endLine":37,"endColumn":74},{"ruleId":"96","severity":1,"message":"97","line":46,"column":30,"nodeType":"95","endLine":46,"endColumn":34},{"ruleId":"96","severity":1,"message":"97","line":79,"column":55,"nodeType":"95","endLine":79,"endColumn":79},{"ruleId":"98","severity":1,"message":"99","line":95,"column":47,"nodeType":"100","endLine":95,"endColumn":55},{"ruleId":"101","severity":1,"message":"102","line":36,"column":12,"nodeType":"103","messageId":"104","endLine":36,"endColumn":20},{"ruleId":"101","severity":1,"message":"105","line":36,"column":111,"nodeType":"103","messageId":"104","endLine":36,"endColumn":117},{"ruleId":"101","severity":1,"message":"106","line":36,"column":119,"nodeType":"103","messageId":"104","endLine":36,"endColumn":126},{"ruleId":"98","severity":1,"message":"99","line":79,"column":49,"nodeType":"100","endLine":79,"endColumn":57},{"ruleId":"101","severity":1,"message":"107","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":35,"column":8,"nodeType":"110","endLine":35,"endColumn":10,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":61,"column":16,"nodeType":"114","messageId":"115","endLine":61,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":72,"column":23,"nodeType":"114","messageId":"115","endLine":72,"endColumn":25},{"ruleId":"101","severity":1,"message":"116","line":88,"column":11,"nodeType":"103","messageId":"104","endLine":88,"endColumn":18},{"ruleId":"117","severity":1,"message":"118","line":90,"column":20,"nodeType":"119","messageId":"120","endLine":90,"endColumn":22},{"ruleId":"87","replacedBy":"121"},{"ruleId":"89","replacedBy":"122"},{"ruleId":"101","severity":1,"message":"123","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'sucess' is assigned a value but never used.","'loading' is assigned a value but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadAllData'. Either include it or remove the dependency array.","ArrayExpression",["126"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'myCount' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["124"],["125"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [loadAllData]",{"range":"129","text":"130"},[933,935],"[loadAllData]"]